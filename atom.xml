<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Gavin Baker ~ antonym.org]]></title>
  <link href="http://www.antonym.org/atom.xml" rel="self"/>
  <link href="http://www.antonym.org/"/>
  <updated>2013-10-10T11:08:30+11:00</updated>
  <id>http://www.antonym.org/</id>
  <author>
    <name><![CDATA[Gavin Baker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
    <title type="html"><![CDATA[What is Rust?]]></title>
    <link href="http://www.antonym.org/blog/2013/10/08/what-is-rust/"/>
    
    <updated>2013-10-08T20:50:00+11:00</updated>
    <id>http://www.antonym.org/blog/2013/10/08/what-is-rust</id>
    
    <content type="html"><![CDATA[<p><a href="http://www.rust-lang.org/">Rust</a> is a compiled, hybrid imperative/object-
oriented/functional language. It appeals directly to any C++ developer who has
battled with memory management, and Python developers who long for faster code.</p>

<p>It&rsquo;s <strong>compiled</strong>, so it&rsquo;s fast. Rust uses <a href="http://www.llvm.org/">LLVM</a> as the
compilation engine, and benefits from all its optimisation and native code
generation support that targets ARM and Intel processors.</p>

<p>Rust uses <strong>type inference</strong>, so you can write cleaner, simpler code while
retaining the benefits of strong static typing. It also supports <strong>generic</strong> and
<strong>algebraic types</strong>, which offers a far richer type system than C++.</p>

<p>There are no <code>NULL</code> pointers, thus rendering an entire class of bugs impossible.
This alone is worth a serious look, as the security and reliability implications
are huge.</p>

<p>Rust is a brace-oriented like C/C++, so many aspects of the syntax will be
immediately familiar to existing developers.</p>

<p>Memory ownership semantics are rich, strict and enforced. There are owned
pointers, shared pointers and <em>optional</em> garbage-collection.</p>

<p>Rust has first-class <strong>concurrency</strong> support, featuring lightweight tasks
and message passing.</p>

<p>What does it look like? I would describe it as terse &ndash; or rather, minimalist.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;Hello, world&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok, that&rsquo;s not very useful. How about a na√Øve Fibonacci function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="o">:</span> <span class="k">uint</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="k">uint</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">match</span> <span class="n">n</span> <span class="p">{</span>
</span><span class='line'>        <span class="m">0.</span><span class="p">.</span><span class="m">1</span>    <span class="o">=&gt;</span> <span class="m">1</span><span class="p">,</span>
</span><span class='line'>        <span class="n">_</span>       <span class="o">=&gt;</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="m">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yes, Rust has <strong>pattern matching</strong> just like Haskell. Forget about the simple
<code>switch</code> statement &ndash; <code>match</code> is super-powerful and flexible, supporting ranges,
options and destructuring fields from <code>struct</code>s.</p>

<p>What about some tasks:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">test_tasks</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;About to spawn...&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">do</span> <span class="n">spawn</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;Hello from the first subtask!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">do</span> <span class="n">spawn</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;Hello from another subtask!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Despite having spent years working in C++, I have often lamented its
shortcomings. Yet until recently, no other language seems to have come close to
competing with C++ as a systems language.</p>

<p>The <a href="http://dlang.org">D programming language</a> looks very interesting, and aims
to provide a worthy alternative to C++.  However, last time I looked, there was
a schism over the runtime libraries which made adoption difficult. Uncertainty
about such a fundamental aspect is not reassuring for potential users.</p>

<p>The <a href="http://www.go-lang.org/">Go programming language</a> from Google is fantastic,
and I have already used it on a number of small projects. The only shortcoming I
see here is the garbage collection, which makes real-time systems impractical.</p>

<p>Rust has great promise, and also has both Mozilla and Samsung backing its
progress. There is a vibrant, friendly and smart community behind it, and a
growing number of third-party libraries are supported. I am very optimistic
about the future of Rust, and look forward to contributing.</p>
]]></content>
    
  </entry>
  
</feed>