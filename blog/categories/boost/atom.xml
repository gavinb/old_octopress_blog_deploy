<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: boost | antonym.org]]></title>
  <link href="http://antonym.org//blog/categories/boost/atom.xml" rel="self"/>
  <link href="http://antonym.org//"/>
  <updated>2014-02-26T09:06:01+11:00</updated>
  <id>http://antonym.org//</id>
  <author>
    <name><![CDATA[Gavin Baker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Modern C++11 Memory Management]]></title>
    <link href="http://antonym.org//2014/01/modern-c-plus-plus-11-memory-management.html"/>
    <updated>2014-01-31T09:41:00+11:00</updated>
    <id>http://antonym.org//2014/01/modern-c-plus-plus-11-memory-management</id>
    <content type="html"><![CDATA[<p>Memory management in low level code has changed slowly but surely over the years.
In traditional C code, you would allocate memory with <code>malloc()</code> and release it
with <code>free()</code>.</p>

<p>```c
char* buffer = malloc(BUFFER_SIZE);</p>

<p>fill_buffer(buffer, BUFFER_SIZE);
process_buffer(buffer, BUFFER_SIZE);</p>

<p>free(buffer);
```</p>

<p>Some of the problems with this approach were:</p>

<ul>
<li><code>malloc()</code> might fail if the system is running low on memory, so you would
have to check for a <code>NULL</code> return and handle the error appropriately.</li>
<li>you might forget to call <code>free()</code>, thus leaking memory. This is especially
common when there are multiple code paths, early returns and so on.</li>
<li>the memory might be referred to after its release, causing subtle bugs
or crashes.</li>
<li>sharing the memory between threads was error-prone and relied on complex
systems to avoid leaking or trashing memory.</li>
</ul>


<p>The above code is also valid C++, albeit not idiomatic.  Rather than rely on the
runtime, C++ introduced heap management into the language with <code>new</code> and
<code>delete</code> operators.</p>

<p>```c++
Buffer* buffer = new Buffer(BUFFER_SIZE);</p>

<p>buffer->fill(0xaa);
buffer->process();</p>

<p>delete buffer;
```</p>

<p>This was not without its issues:</p>

<ul>
<li>If the system is low on memory, <code>new</code> could fail and throw an exception. This
would require a <code>try/catch</code> block to handle the failure, otherwise the program
would abort.</li>
<li><code>new</code> could also be configured to return <code>NULL</code>, requiring an entirely different
error handling strategy.</li>
<li>It is generally inadvisable to mix memory allocated with <code>new</code> with memory
allocated using <code>malloc()</code> (as they could be using different heap areanas).</li>
</ul>


<h2>Modern Memory Management</h2>

<p>To simplify memory management and reduce the potential for bugs, C++11 introduces
several types of <em>smart pointers</em>:</p>

<ul>
<li><code>std::unique_ptr</code>: a pointer which is automatically freed when the pointer goes
out of scope</li>
<li><code>std::shared_ptr</code>: a reference-counting pointer which can be shared among
threads, and deletes the object when the last reference is released</li>
<li><code>std::weak_ptr</code>: a handle which does not hold a reference, but can be
materialised into a <code>std::shared_ptr</code> on demand</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Boost now and C++11 later]]></title>
    <link href="http://antonym.org//2014/01/boost-now-and-c-plus-plus-11-later.html"/>
    <updated>2014-01-14T20:16:00+11:00</updated>
    <id>http://antonym.org//2014/01/boost-now-and-c-plus-plus-11-later</id>
    <content type="html"><![CDATA[<p>The C++11 standard has been around for a few years now (with the first published
in 2009???).  We are fortunate that both the <code>gcc</code> project and the <code>clang</code>
project have implemented comprehensive support for the new language and library
features.  So if you&rsquo;re using the current versions of these tools, you can take
advantage of all the new features right now.</p>

<p>Unfortunately, some of the larger compiler vendors are still lagging in their
support for the new, shiny C++11 features.  A thorough <a href="http://cpprocks.com/c11-compiler-support-shootout-visual-studio-gcc-clang-intel/">summary of major
compiler support</a>
shows GCC and Clang are way ahead of the Microsoft and Intel compilers.</p>

<p>Whether your project is constrained by toolchain support, 3rd party library
support, or upgrading your toolchain isn&rsquo;t currently feasible, fortunately there
are ways to get many of the new features &lsquo;for free&rsquo;.</p>

<p>The <a href="http://www.boost.org/">Boost project</a> provides a comprehensive set of C++
libraries which provide essential features, as well as acting as an unofficial
staging ground for many new C++ library features.  So most of the new goodness
with <code>unique_ptr</code> and friends can be had right now, simply by using Boost.</p>

<p>Modern C++ memory management</p>

<p>C++11        | Boost
<code>unique_ptr</code> | <code>scoped_ptr</code>
<code>shared_ptr</code> | <code>shared_ptr</code></p>
]]></content>
  </entry>
  
</feed>
