<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: boost | antonym.org]]></title>
  <link href="http://antonym.org//blog/categories/boost/atom.xml" rel="self"/>
  <link href="http://antonym.org//"/>
  <updated>2014-06-30T23:08:54+10:00</updated>
  <id>http://antonym.org//</id>
  <author>
    <name><![CDATA[Gavin Baker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Modern C++11 Memory Management]]></title>
    <link href="http://antonym.org//2014/01/modern-c-plus-plus-11-memory-management.html"/>
    <updated>2014-01-31T09:41:00+11:00</updated>
    <id>http://antonym.org//2014/01/modern-c-plus-plus-11-memory-management</id>
    <content type="html"><![CDATA[<p>Memory management in low level code has changed slowly over the years.  In
traditional C code, you would allocate memory with <code>malloc()</code> and release it
with <code>free()</code>.</p>

<!--more-->


<p>```
char* buffer = malloc(BUFFER_SIZE);</p>

<p>fill_buffer(buffer, BUFFER_SIZE);
process_buffer(buffer, BUFFER_SIZE);</p>

<p>free(buffer);
```</p>

<p>Some of the problems with this approach were:</p>

<ul>
<li><code>malloc()</code> might fail if the system is running low on memory, so you would
have to check for a <code>NULL</code> return and handle the error appropriately.</li>
<li>you might forget to call <code>free()</code>, thus leaking memory. This is especially
common when there are multiple code paths, early returns and so on.</li>
<li>the memory might be referred to <em>after</em> its release, causing subtle bugs
or crashes.</li>
<li>sharing the memory between threads was error-prone and relied on complex
systems to avoid leaking or trashing memory.</li>
</ul>


<p>The above code is also perfectly valid C++, albeit not exactly idiomatic.
Rather than rely on the C runtime, C++ introduced heap management into the
language itself, with the <code>new</code> and <code>delete</code> operators:</p>

<p>```c++
Buffer* buffer = new Buffer(BUFFER_SIZE);</p>

<p>buffer->fill(0xaa);
buffer->process();</p>

<p>delete buffer;
```</p>

<p>This too is not without its issues:</p>

<ul>
<li>If the system is low on memory, <code>new</code> could fail and throw an exception
(the default behaviour). This would require a <code>try/catch</code> block to handle
the failure, otherwise the program would abort.</li>
<li><code>new</code> could also be configured to return <code>NULL</code>, requiring an entirely
different error handling strategy.</li>
<li>It is generally inadvisable to mix memory allocated with <code>new</code> with memory
allocated using <code>malloc()</code> (as they could potentially be allocated in
different heap areanas, and cause corruption).</li>
</ul>


<h2>Modern Memory Management</h2>

<p>To drastically simplify memory management and reduce the potential for bugs,
C++11 introduces several types of <em>smart pointers</em>:</p>

<ul>
<li><code>std::unique_ptr</code>: a pointer which is automatically freed when the pointer
goes out of scope, and has a single owner at all times</li>
<li><code>std::shared_ptr</code>: a reference-counting pointer which can be shared among
multiple threads, and deletes the object when the last reference is released</li>
<li><code>std::weak_ptr</code>: a handle which does not hold a reference, but can be
materialised into a <code>std::shared_ptr</code> on demand</li>
</ul>


<p>These three smart pointer types should be able to cover the vast majority of
memory management needs in a typcail application.  (There will always be
exceptions which need custom allocation strategies, such as high performance
games, numerical processing, etc).</p>

<p>By using the correct smart pointer according to the desired semantics, you
can virtually eliminate leaks and other common memory problems.</p>

<p>These are each covered in detail in their own articles below:</p>

<ul>
<li><a href="/2014/01/c-plus-plus-11-unique-pointer.html">Unique Pointer</a></li>
<li><a href="/2014/02/c-plus-plus-11-shared-pointer.html">Shared Pointer</a></li>
<li>Weak Pointer (TBA)</li>
</ul>

]]></content>
  </entry>
  
</feed>
