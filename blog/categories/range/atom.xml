<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: range | antonym.org]]></title>
  <link href="http://antonym.org//blog/categories/range/atom.xml" rel="self"/>
  <link href="http://antonym.org//"/>
  <updated>2014-06-10T22:58:48+10:00</updated>
  <id>http://antonym.org//</id>
  <author>
    <name><![CDATA[Gavin Baker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C++11 Range-based for loops]]></title>
    <link href="http://antonym.org//2014/02/c-plus-plus-11-range-based-for-loops.html"/>
    <updated>2014-02-25T08:44:00+11:00</updated>
    <id>http://antonym.org//2014/02/c-plus-plus-11-range-based-for-loops</id>
    <content type="html"><![CDATA[<p>The humble <code>for</code> loop is one of the oldest control flow control constructs
in the Algol-family of languages.  Yet while other languages have extended
their syntax to allow <code>for</code> loops to do all sorts of crazy and useful things
beyond iterate over a range of numbers, C and C++ have remained steadfast &ndash;
until now.</p>

<p>The <code>for</code> loop finally has a new syntax to better support iterators and
ranges (a great new feature in C++11/14).  So you can now iterate over much
more than just numbers.</p>

<p>The C++ container classes provide iterators, but the looping syntax is
rather unweildly but familiar pattern:</p>

<p>```c++</p>

<pre><code>std::vector&lt;int&gt; vec;
// ...
std::vector&lt;int&gt;::iter it;
for (it = vec.begin(); it != vec.end(); ++it)
{
    int&amp; n = *it;
    total += n;
}
</code></pre>

<p>```</p>

<p>For some time, the most excellent <a href="http://www.boost.org/">Boost++ project</a>
has provided some syntactic sugar to reduce the complexity of this code
considerably.  By using Boost&rsquo;s <code>foreach</code> library, you can replace the above
loop with the much simpler:</p>

<p>```c++</p>

<pre><code>std::vector&lt;int&gt; vec;
// ...
for (int&amp; num, vec)
{
    total += n;
}
</code></pre>

<p>```</p>

<p>But now the C++11 specification has this style of syntax (with a slight
change of punctuation; it uses &lsquo;:&rsquo; rather than &lsquo;,&rsquo;). So now you can write:</p>

<p>```c++</p>

<pre><code>std::vector&lt;int&gt; vec;
// ...
for (auto n : vec)
{
    total += n;
}
</code></pre>

<p>```</p>

<p>This is obviously much cleaner and clearer than the iterator-based code.  If
all you need to do is iterate over a container, you can start using this
syntax straight away.</p>

<p>(Aside: if you are actually going to sum the contents of a vector, using the
<code>reduce</code> algorithm is even better.)</p>

<h2>Ranges</h2>

<p>The iterators in the STL have <code>begin()</code> and <code>end()</code> methods to control
iteration loops.  New in C++11 are <code>begin()</code> and <code>end()</code> <em>functions</em>, which
can be used to construct ranges.  So what is a range?</p>

<h2>The new <code>for</code> loop in detail</h2>

<p>So how does this new <code>for</code> loop actually work?</p>
]]></content>
  </entry>
  
</feed>
