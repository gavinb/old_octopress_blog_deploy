<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: opengl | antonym.org]]></title>
  <link href="http://antonym.org//blog/categories/opengl/atom.xml" rel="self"/>
  <link href="http://antonym.org//"/>
  <updated>2014-02-26T09:06:01+11:00</updated>
  <id>http://antonym.org//</id>
  <author>
    <name><![CDATA[Gavin Baker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rust and OpenGL: A Tale of Two Bindings]]></title>
    <link href="http://antonym.org//2013/12/rust-opengl-bindings.html"/>
    <updated>2013-12-19T17:22:00+11:00</updated>
    <id>http://antonym.org//2013/12/rust-opengl-bindings</id>
    <content type="html"><![CDATA[<p>Rust is proving to be a strong <em>blah</em>.</p>

<p>Tradeoffs. But IMHO bindings should provide a natural interface to the host
language, and hide all the glue.</p>

<ul>
<li><pre><code> gl::BindBuffer(gl::ARRAY_BUFFER, *particleBuffer);
</code></pre></li>
<li><pre><code> gl2::bind_buffer(gl2::ARRAY_BUFFER, particleBuffer);
</code></pre></li>
</ul>


<p>macro_rules! to_glstr {</p>

<pre><code>($rs:expr) =&gt; {
    $rs.to_c_str().unwrap() as *GLchar
}
</code></pre>

<p>}</p>

<ul>
<li><pre><code> let particleBuffer: gl2::GLuint = 0;
</code></pre></li>
<li><pre><code> gl2::gen_buffers(1);
</code></pre></li>
<li><pre><code> gl2::bind_buffer(gl2::ARRAY_BUFFER, particleBuffer);
</code></pre></li>
<li><pre><code> gl2::buffer_data(gl2::ARRAY_BUFFER, self.emitter.particles, gl2::STATIC_DRAW);
</code></pre></li>
<li><pre><code> let particleBuffer: *mut GLuint;
</code></pre></li>
<li><pre><code> let particle_sz = mem::size_of::&lt;Particle&gt;();
</code></pre>

<p>+</p></li>
<li><pre><code> gl::GenBuffers(1, particleBuffer);
</code></pre></li>
<li><pre><code> gl::BindBuffer(gl::ARRAY_BUFFER, *particleBuffer);
</code></pre></li>
<li><pre><code> gl::BufferData(gl::ARRAY_BUFFER, (NUM_PARTICLES*particle_sz) as GLsizeiptr, cast::transmute(self.emitter.particles), gl::STATIC_DRAW);
</code></pre></li>
<li><pre><code> gl2::vertex_attrib_pointer_f32(self.shader.a_pSizeOffset, 1, false, particle_sz, 16);
</code></pre></li>
<li><pre><code> gl2::vertex_attrib_pointer_f32(self.shader.a_pColourOffset, 3, false, particle_sz, 20);
</code></pre></li>
<li><pre><code> gl::VertexAttribPointer(self.shader.a_pID, 1, gl::FLOAT, gl::FALSE, particle_sz, cast::transmute(0));
</code></pre></li>
<li><pre><code> gl::VertexAttribPointer(self.shader.a_pRadiusOffset, 1, gl::FLOAT, gl::FALSE, particle_sz, 
</code></pre></li>
<li><pre><code> self.a_pID = gl2::get_attrib_location(self.program, "a_pID") as u32;
</code></pre></li>
<li><pre><code> self.a_pRadiusOffset = gl2::get_attrib_location(self.program, "a_pRadiusOffset") as u32;
</code></pre></li>
<li><pre><code> self.a_pVelocityOffset = gl2::get_attrib_location(self.program, "a_pVelocityOffset") as u32;
</code></pre></li>
<li><pre><code> self.a_pDecayOffset = gl2::get_attrib_location(self.program, "a_pDecayOffset") as u32;
</code></pre></li>
<li><pre><code> self.a_pSizeOffset = gl2::get_attrib_location(self.program, "a_pSizeOffset") as u32;
</code></pre></li>
<li><pre><code> self.a_pColourOffset = gl2::get_attrib_location(self.program, "a_pColourOffset") as u32;
</code></pre></li>
<li><pre><code> self.a_pID = gl::GetAttribLocation(self.program, to_glstr!("a_pID")) as u32;
</code></pre></li>
<li><pre><code> self.a_pRadiusOffset = gl::GetAttribLocation(self.program, to_glstr!("a_pRadiusOffset")) as u32;
</code></pre></li>
<li><pre><code> self.a_pVelocityOffset = gl::GetAttribLocation(self.program, to_glstr!("a_pVelocityOffset")) as u32;
</code></pre></li>
<li><pre><code> self.a_pDecayOffset = gl::GetAttribLocation(self.program, to_glstr!("a_pDecayOffset")) as u32;
</code></pre></li>
<li><pre><code> self.a_pSizeOffset = gl::GetAttribLocation(self.program, to_glstr!("a_pSizeOffset")) as u32;
</code></pre></li>
<li><pre><code> self.a_pColourOffset = gl::GetAttribLocation(self.program, to_glstr!("a_pColourOffset")) as u32;
</code></pre></li>
</ul>

]]></content>
  </entry>
  
</feed>
