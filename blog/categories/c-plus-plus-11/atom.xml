<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: c++11 | antonym.org]]></title>
  <link href="http://antonym.org//blog/categories/c-plus-plus-11/atom.xml" rel="self"/>
  <link href="http://antonym.org//"/>
  <updated>2014-02-26T09:06:01+11:00</updated>
  <id>http://antonym.org//</id>
  <author>
    <name><![CDATA[Gavin Baker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C++11 Futures]]></title>
    <link href="http://antonym.org//2014/02/c-plus-plus-11-futures.html"/>
    <updated>2014-02-25T08:44:00+11:00</updated>
    <id>http://antonym.org//2014/02/c-plus-plus-11-futures</id>
    <content type="html"><![CDATA[<p>Concurrency is one of the most significant challenges facing software
development today.  As the gains in processor performance diminish year over
year, additional cores have become the norm.  For some years now, multicore
processors have become the norm.</p>

<p>Taking advantage of multiple cores has usually required writing multithreaded
code, which can be complex to design and debug.  One of my favourite new
features in the C++11 standard library is the <code>future</code> module.  This provides
an extra layer of abstraction over threads, providing a simple mechanism
for asynchronous (ie. concurrent) processing.</p>

<!-- more -->


<h2>What is a &lsquo;future&rsquo;?</h2>

<p>A <code>std::future</code> is an object that represents the future return value of a
function; it is the result of a computation which you need but do not yet have.
A <code>std::future</code> object also represents the current processing state of this
computation; whether or not it has completed, for example.</p>

<p>An asynchronous task (which is generally created on its own thread) makes a
<em>promise</em> that it will process a result at some time in the <em>future</em> and
eventually return this result to the caller.</p>

<h2>When are futures useful?</h2>

<p>If your application needs to perform a non-trivial computation which could take
quite some time to complete, it is frequently preferrable to perform this
computation asynchronously; that is, in another thread, so the calling or main
function can continue processing, perform other tasks, remain responsive to the
user, and so on.</p>

<p>Futures can also be very useful when there are multiple computations to perform,
and it is not known which will complete first.  They can all be initiated at the
same time, and the results picked up as each finishes.</p>

<h2>How do I perform an async call?</h2>

<p>Imagine we have a boring function which will take an undetermined but long time
to complete:</p>

<p>```c++
unsigned boring()
{</p>

<pre><code>// Consume many CPU cycles...
// ...then eventually...
return boring_result;
</code></pre>

<p>}
```</p>

<p>Rather than calling this function directly and waiting for its result, we can
invoke it asynchronously:</p>

<p><code>c++
std::future&lt;unsigned&gt; ans = std::async(boring);
</code></p>

<p>What is returned <em>immediately</em> is a <code>future</code> object or token (templated over the
return type of the function we are calling), which allows us to query the status
of the computation, and (once complete) retrieve the result of the <code>boring()</code>
function.</p>

<p>Processing in the calling thread (in this case, <code>main</code>) continues, as the
<code>boring</code> function is spun off into its own thread (an implementation detail) to
be scheduled independently.  In this way, we can continue to perform other
processing while this boring work is being done in the background.</p>

<p>To retrieve the answer, we simply call <code>get()</code> on the <code>future</code> object when we
need to access the result:</p>

<p><code>c++
unsigned result = ans.get();
</code></p>

<p>This will block until the result of the <code>future</code> is ready, and then return
the value from <code>boring()</code>.</p>

<p>To avoid blocking on the result, you can use the <code>wait_for()</code> or <code>wait_until()</code>
methods to check on the status of the <code>future</code>.</p>

<h2>How do I monitor the future&rsquo;s status?</h2>

<p>While the calling process is performing other work, it might be useful to check
if the asynchronous processing has completed yet.  We can either wait for
a certain time to elapse (<code>wait_for()</code>) or wait until a clock time is reached
(<code>wait_until()</code>).  This fragment shows how you can wait 5ms for a result,
retrieving it if available, and continuing if not:</p>

<p>```c++
std::chrono::milliseconds wait_time_ms(5);</p>

<p>std::future_status status = ans.wait_for(wait_time_ms);</p>

<p>if (status == std::future_status::ready)
{</p>

<pre><code>unsigned result = ans.get();
</code></pre>

<p>}
```</p>

<p>A more complete example shows monitoring the status of multiple <code>async</code> calls,
displaying the result as each finishes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++11 Smart Pointers: Shared Pointer]]></title>
    <link href="http://antonym.org//2014/02/c-plus-plus-11-shared-pointer.html"/>
    <updated>2014-02-13T18:45:00+11:00</updated>
    <id>http://antonym.org//2014/02/c-plus-plus-11-shared-pointer</id>
    <content type="html"><![CDATA[<p>In the last article on smart pointers, we looked at <code>std::unique_ptr</code>, which
provides a simple and safe smart pointer to wrap heap allocations.  As the name
implies, this smart pointer type cannot be shared between multiple threads.</p>

<p>So then how can you ensure that the memory is freed once all referring threads
have finished with the resource?  This is especially difficult when the thread
lifecycle is non-deterministic.</p>

<!--more-->


<p>The solution to sharing heap-allocated memory between threads is the
<code>std::shared_ptr</code>. While it does <strong>not</strong> address race conditions (see mutexes et
al), it does solve the problem of managing the lifecycle of a shared resource
between multiple threads.</p>

<h2>Reference Counting</h2>

<p>The <code>shared_ptr</code> implementation uses reference counting to keep track of how
many references to the object exist. Each time the smart pointer is replicated,
the reference count is increased. Each time a smart pointer goes out of scope,
the reference count is decreased. Once the final reference is gone (ie. the
reference count reaches zero), the object is deleted (and the destructor
called).</p>

<h2>Example</h2>

<p>Imagine we have a worker thread function which needs to use a shared resource.
We can pass the worker thread a shared pointer:</p>

<p>```c++
void worker(std::shared_ptr<Foo>&amp; obj)
{</p>

<pre><code>printf("tid %p worker: running, obj %p use_count %ld\n",
    std::this_thread::get_id(),
    obj.get(),
    obj.use_count());

// Do something useful with obj
obj-&gt;process();
</code></pre>

<p>}
```</p>

<p>We can use the object in as many threads as we need, and they can all terminate
at an arbitrary time. The object will stay alive until the last thread has
finished, and releases its reference.</p>

<p>In this example, the <code>main()</code> function creates an instance, then passes the
smart pointer to several worker threads:</p>

<p>```c++</p>

<pre><code>std::shared_ptr&lt;Foo&gt; obj(new Foo);

std::thread w1(std::bind(worker, obj));
std::thread w2(std::bind(worker, obj));

w1.join();
w2.join();
</code></pre>

<p>```</p>

<p>Note the use of <code>std::bind</code> to pass the <code>obj</code> pointer as a reference parameter
to the thread function;  normally thread function parameters are passed by
value.</p>

<p>The output will resemble something like:</p>

<pre><code>+++ main()
+++ Foo::Foo()
main:   spawning, obj use_count 1
main:   joining,  obj use_count 3
worker: running,  obj use_count 3
worker: running,  obj use_count 2
main:   leaving,  obj use_count 1
--- main()
--- Foo::~Foo()
</code></pre>

<p>We clearly see the lifecycle of the <code>Foo</code> instance.  In <code>main</code>, it is created
and thus the <code>use_count</code> is 1 (before the threads are spawned).  Then two
threads are spawned, increasing the <code>use_count</code> to 3, which remains while the
threads are running. Main joins (or waits) to block on each thread terminating,
so once <code>main</code> continues, both threads have completed, thus the <code>use_count</code> is
back down to 1. Finally, the smart pointer goes out of scope at the end of main,
and is destroyed after main completes.</p>

<p>The new <code>std::shared_ptr</code> support makes it easy to share heap-allocated memory
between threads, or throughout code that has complex lifetime requirements.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++11 Smart Pointers: Unique Pointer]]></title>
    <link href="http://antonym.org//2014/01/c-plus-plus-11-unique-pointer.html"/>
    <updated>2014-01-31T18:29:00+11:00</updated>
    <id>http://antonym.org//2014/01/c-plus-plus-11-unique-pointer</id>
    <content type="html"><![CDATA[<p>C++11 introduces many significant improvements to the language and runtime. One
of the most important is to do with memory management &ndash; specifically, smart
pointers.  The <code>unique_ptr</code> makes managing dynamically allocated memory safe and
simple.</p>

<!--more-->


<p>Instead of using a bare pointer type in C++, the modern C++11 style is now to
use <code>std::unique_ptr</code>.  This class will automatically free the allocated memory
once the variable goes out of scope.  This is the simplest of the new smart
pointer types in C++11.</p>

<p>Whereas before, you might write:</p>

<p>```c++</p>

<pre><code>Foo* obj = new Foo;

obj-&gt;process();

delete obj;
</code></pre>

<p>```</p>

<p>you can now write:</p>

<p>```c++</p>

<pre><code>std::unique_ptr&lt;Foo&gt; obj(new Foo);

obj-&gt;process();

// obj will be automatically deleted
</code></pre>

<p>```</p>

<h2>Properties</h2>

<p>The <code>std::unique_ptr</code> class enforces several useful properties:</p>

<ul>
<li>only a single reference to the allocated object can be active at any given time</li>
<li>the object will be deleted when the smart pointer goes out of scope</li>
<li>the object will be deleted if an exception is thrown</li>
</ul>


<p>The <code>unique_ptr</code> type is templated over the pointer type, and its constructor
takes the allocated pointer returned from the <code>new</code> operator.  And because the
pointer <code>operator-&gt;()</code> is overloaded, the smart pointer object can be used just
like a regular pointer.</p>

<p><strong>Note 1:</strong> For Boost users, this is almost the same as the <code>boost::scoped_ptr</code>
class.</p>

<p><strong>Note 2:</strong> This class supercedes the <code>std::auto_ptr</code>, which was deprecated in C++11.</p>

<p><strong>Note 3:</strong> When invoking <code>std::unique_ptr</code> methods on the smart pointer itself,
remember to use the dot <code>.</code> operator. When invoking methods on the object pointer,
use the arrow <code>-&gt;</code> operator as you normally would (since it is overloaded to return the underlying object pointer).</p>

<h2>Sample</h2>

<p>Once the variable goes out of scope, <code>delete</code> will be called to release the memory,
and the destructor will be invoked as usual, as this simple example shows:</p>

<p>```c++</p>

<h1>include <memory></h1>

<h1>include <iostream></h1>

<p>class Foo
{
public:</p>

<pre><code>Foo() { std::cout &lt;&lt; "+++ Foo::Foo()\n"; }
~Foo() { std::cout &lt;&lt; "--- Foo::~Foo()\n"; }
void process() { std::cout &lt;&lt; "... Foo::process()\n"; }
</code></pre>

<p>};</p>

<p>int main(int argc, char* argv[])
{</p>

<pre><code>std::cout &lt;&lt; "+++ main()\n";

std::unique_ptr&lt;Foo&gt; obj(new Foo);
obj-&gt;process();

std::cout &lt;&lt; "--- main()\n";

return 0;
</code></pre>

<p>}
```</p>

<p>The output is:</p>

<pre><code>+++ main()
+++ Foo::Foo()
... Foo::process()
--- main()
--- Foo::~Foo()
</code></pre>

<h2>Explcit release</h2>

<p>If you wish to delete the object before the holding pointer goes out of scope,
you can use the <code>reset()</code> method on the smart pointer:</p>

<p>```c++</p>

<pre><code>std::unique_ptr&lt;Foo&gt; obj(new Foo);

obj-&gt;process();
obj.reset();
</code></pre>

<p>```</p>

<p>(Notice that methods invoked on the smart pointer itself use <code>.</code> whereas
methods on the target object use the overloaded dereference operator <code>-&gt;</code>).</p>

<p>This results in the trace:</p>

<pre><code>+++ main()
+++ Foo::Foo()
... Foo::process()
... obj: 0x7fb733c047c0
--- Foo::~Foo()
--- main()
</code></pre>

<p>The simple difference here is that the object&rsquo;s destructor is called <em>before</em>
the end of <code>main</code>, since we invoke <code>reset()</code> explicitly.  Above, the destructor
is invoked <em>after</em> the end of <code>main</code>, since the smart pointer is going out of
scope.  This is a subtle but important point.</p>

<h2>Uniqueness</h2>

<p>What happens if we try to assign this pointer to another smart pointer?</p>

<p>```c++</p>

<pre><code>std::unique_ptr&lt;Foo&gt; obj(new Foo);

std::unique_ptr&lt;Foo&gt; obj2;

obj2 = obj;
</code></pre>

<p>```</p>

<p>We get a meaningful compiler error:</p>

<pre><code>cpp11_unique_ptr_ex2.cpp:27:10: error: object of type 'std::__1::unique_ptr&lt;Foo,
      std::__1::default_delete&lt;Foo&gt; &gt;' cannot be assigned because its copy
      assignment operator is implicitly deleted
    obj2 = obj;
</code></pre>

<p>The compiler is enforcing the unique ownership semantics, so we can&rsquo;t
accidentally do the wrong thing.</p>

<p>But if we can&rsquo;t assign these unique pointers, how do we move them around? Using
the new explicit <em>move</em> support in C++11 (which is itself a large and complex
topic). This transfers ownership of the pointer from one <code>unique_ptr</code> instance
to another:</p>

<p>```c++</p>

<pre><code>std::unique_ptr&lt;Foo&gt; obj1(new Foo);
std::unique_ptr&lt;Foo&gt; obj2;

obj2 = std::move(obj1);
</code></pre>

<p>```</p>

<p>The output of the test program shows the result (we can access the enclosed pointer
using the <code>get()</code> method):</p>

<pre><code>+++ main()
+++ Foo::Foo()
Before move:
     obj1:0x7fa8b9d00000
     obj2:0x0
After move:
     obj1:0x0
     obj2:0x7fa8b9d00000
--- main()
--- Foo::~Foo()
</code></pre>

<p>Notice how only one <code>Foo</code> instance was created, and that its pointer value moved
from <code>obj1</code> to <code>obj2</code>? After the <code>move</code> operation, the pointer in <code>obj1</code> is null.
Thus move semantics preserve the single owner invariant.</p>

<h2>Arrays</h2>

<p>The <code>std::unique_ptr</code> class also has explicit support for handling arrays of
pointers. It is not a replacement for <code>std::vector</code>, but depending on your
requirements, this array support can be very useful.</p>

<p>```c++
const unsigned N = 10;</p>

<p>std::unique_ptr&lt;Foo[]> objarray(new Foo [N]);</p>

<p>for (unsigned i = 0; i &lt; N; i++)
{</p>

<pre><code>std::cout &lt;&lt; i &lt;&lt; " ";
objarray[i].process();
</code></pre>

<p>}
```</p>

<h2>Returning objects from functions</h2>

<p>The <code>unique_ptr</code> idiom is especially useful when you need to return an allocated
resource from a function or method, but don&rsquo;t want to worry about having to free
the object later.  This sample function returns a unique pointer to the caller,
transferring ownership by implicitly moving the result:</p>

<p>```c++
std::unique_ptr<Foo> make_foo()
{</p>

<pre><code>std::unique_ptr&lt;Foo&gt; obj(new Foo);

// prepare obj

return obj;
</code></pre>

<p>}
```</p>

<p>The object will be freed when the caller stops referencing it.</p>

<h2>Storing in Containers</h2>

<p>The <em>move</em> support enables efficient storage of <code>unique_ptr</code> managed objects in
containers (one of the limitations of the deprecated <code>std::auto_ptr</code>).  If you
have a vector of pointers to objects, you need to carefully manage ownership
(eg. does the creator or the container own the allocations?) and manually free
them. But with <code>unique_ptr</code>, instead of:</p>

<p><code>c++
std::vector&lt;Foo*&gt; v;
</code></p>

<p>we can write:</p>

<p><code>c++
std::vector&lt; std::unique_ptr&lt;Foo&gt; &gt; v;
</code></p>

<p>then when creating the object, we use the explicit <em>move</em> support to pass
ownership of the object to the container (and avoid any reallocations or
temporaries):</p>

<p><code>c++
std::unique_ptr&lt;Foo&gt; q(new Foo(i));
v.push_back(std::move(q));
</code></p>

<p>When the <code>vector</code> goes out of scope, its destructor will in turn release all
the <code>unique_ptr</code> instances it owns.  This automatic releasing of resources
can save a great deal of debugging pain and potential memory leaks.</p>

<h2>Overheads</h2>

<p>The benefits of using <code>std::unique_ptr</code> are many.  And fortunately, the cost of
using this support is minimal.  The is an overhead of one word per instance (8
bytes on a 64-bit architecture).  The code generated for a method invocation
involves an extra pointer indirection, which might cost a few percent.</p>

<h2>Other smart pointer types</h2>

<p>Stay tuned for articles on:</p>

<ul>
<li><code>std::shared_ptr</code></li>
<li><code>std::weak_ptr</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Boost now and C++11 later]]></title>
    <link href="http://antonym.org//2014/01/boost-now-and-c-plus-plus-11-later.html"/>
    <updated>2014-01-14T20:16:00+11:00</updated>
    <id>http://antonym.org//2014/01/boost-now-and-c-plus-plus-11-later</id>
    <content type="html"><![CDATA[<p>The C++11 standard has been around for a few years now (with the first published
in 2009???).  We are fortunate that both the <code>gcc</code> project and the <code>clang</code>
project have implemented comprehensive support for the new language and library
features.  So if you&rsquo;re using the current versions of these tools, you can take
advantage of all the new features right now.</p>

<p>Unfortunately, some of the larger compiler vendors are still lagging in their
support for the new, shiny C++11 features.  A thorough <a href="http://cpprocks.com/c11-compiler-support-shootout-visual-studio-gcc-clang-intel/">summary of major
compiler support</a>
shows GCC and Clang are way ahead of the Microsoft and Intel compilers.</p>

<p>Whether your project is constrained by toolchain support, 3rd party library
support, or upgrading your toolchain isn&rsquo;t currently feasible, fortunately there
are ways to get many of the new features &lsquo;for free&rsquo;.</p>

<p>The <a href="http://www.boost.org/">Boost project</a> provides a comprehensive set of C++
libraries which provide essential features, as well as acting as an unofficial
staging ground for many new C++ library features.  So most of the new goodness
with <code>unique_ptr</code> and friends can be had right now, simply by using Boost.</p>

<p>Modern C++ memory management</p>

<p>C++11        | Boost
<code>unique_ptr</code> | <code>scoped_ptr</code>
<code>shared_ptr</code> | <code>shared_ptr</code></p>
]]></content>
  </entry>
  
</feed>
